/*! For license information please see main.41463f3b19e5993e8d0f.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/media.js":(t,e,i)=>{i.r(e),i.d(e,{default:()=>l});var r=i("./node_modules/ogl/src/core/Texture.js"),s=i("./node_modules/ogl/src/core/Program.js"),a=i("./node_modules/ogl/src/core/Mesh.js"),n=i("./app/shaders/plane-vertex.glsl"),h=i("./app/shaders/plane-fragment.glsl");const l=class{constructor({element:t,geometry:e,index:i,gl:r,scene:s}){this.element=t,this.gl=r,this.geometry=e,this.index=i,this.scene=s,this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){this.texture=new r.Texture(this.gl),console.log(this.element),this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=this.element.getAttribute("data-src"),this.texture.image=this.image,this.image.onload=t=>this.texture.image=this.image}createProgram(){this.program=new s.Program(this.gl,{fragment:h.default,vertex:n.default,uniforms:{tMap:{value:this.texture}}})}createMesh(){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.position.x+=this.index*this.mesh.scale.x}}},"./app/shaders/plane-fragment.glsl":(t,e,i)=>{i.r(e),i.d(e,{default:()=>r});const r="precision highp float;\n#define GLSLIFY 1\nuniform sampler2D tMap;\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 tex = texture2D(tMap, vUv);\n\n  gl_FragColor = tex;\n\n}"},"./app/shaders/plane-vertex.glsl":(t,e,i)=>{i.r(e),i.d(e,{default:()=>r});const r="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n}\n"},"./node_modules/ogl/src/core/Mesh.js":(t,e,i)=>{i.r(e),i.d(e,{Mesh:()=>h});var r=i("./node_modules/ogl/src/core/Transform.js"),s=i("./node_modules/ogl/src/math/Mat3.js"),a=i("./node_modules/ogl/src/math/Mat4.js");let n=0;class h extends r.Transform{constructor(t,{geometry:e,program:i,mode:r=t.TRIANGLES,frustumCulled:h=!0,renderOrder:l=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=n++,this.geometry=e,this.program=i,this.mode=r,this.frustumCulled=h,this.renderOrder=l,this.modelViewMatrix=new a.Mat4,this.normalMatrix=new s.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,i)=>{i.r(e),i.d(e,{Program:()=>a});let r=1;const s={};class a{constructor(t,{vertex:e,fragment:i,uniforms:s={},transparent:a=!1,cullFace:n=t.BACK,frontFace:l=t.CCW,depthTest:o=!0,depthWrite:g=!0,depthFunc:u=t.LESS}={}){t.canvas||console.error("gl not passed as first argument to Program"),this.gl=t,this.uniforms=s,this.id=r++,e||console.warn("vertex shader not supplied"),i||console.warn("fragment shader not supplied"),this.transparent=a,this.cullFace=n,this.frontFace=l,this.depthTest=o,this.depthWrite=g,this.depthFunc=u,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const m=t.createShader(t.VERTEX_SHADER);t.shaderSource(m,e),t.compileShader(m),""!==t.getShaderInfoLog(m)&&console.warn(`${t.getShaderInfoLog(m)}\nVertex Shader\n${h(e)}`);const c=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(c,i),t.compileShader(c),""!==t.getShaderInfoLog(c)&&console.warn(`${t.getShaderInfoLog(c)}\nFragment Shader\n${h(i)}`),this.program=t.createProgram(),t.attachShader(this.program,m),t.attachShader(this.program,c),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return console.warn(t.getProgramInfoLog(this.program));t.deleteShader(m),t.deleteShader(c),this.uniformLocations=new Map;let d=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<d;e++){let i=t.getActiveUniform(this.program,e);this.uniformLocations.set(i,t.getUniformLocation(this.program,i.name));const r=i.name.match(/(\w+)/g);i.uniformName=r[0],3===r.length?(i.isStructArray=!0,i.structIndex=Number(r[1]),i.structProperty=r[2]):2===r.length&&isNaN(Number(r[1]))&&(i.isStruct=!0,i.structProperty=r[1])}this.attributeLocations=new Map;const p=[],f=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<f;e++){const i=t.getActiveAttrib(this.program,e),r=t.getAttribLocation(this.program,i.name);-1!==r&&(p[r]=i.name,this.attributeLocations.set(i,r))}this.attributeOrder=p.join("")}setBlendFunc(t,e,i,r){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=i,this.blendFunc.dstAlpha=r,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,i)=>{let r=i.uniformName,s=this.uniforms[r];if(i.isStruct&&(s=s[i.structProperty],r+=`.${i.structProperty}`),i.isStructArray&&(s=s[i.structIndex][i.structProperty],r+=`[${i.structIndex}].${i.structProperty}`),!s)return o(`Active uniform ${r} has not been supplied`);if(s&&void 0===s.value)return o(`${r} uniform is missing a value parameter`);if(s.value.texture)return e+=1,s.value.update(e),n(this.gl,i.type,t,e);if(s.value.length&&s.value[0].texture){const r=[];return s.value.forEach((t=>{e+=1,t.update(e),r.push(e)})),n(this.gl,i.type,t,r)}n(this.gl,i.type,t,s.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function n(t,e,i,r){r=r.length?function(t){const e=t.length,i=t[0].length;if(void 0===i)return t;const r=e*i;let a=s[r];a||(s[r]=a=new Float32Array(r));for(let r=0;r<e;r++)a.set(t[r],r*i);return a}(r):r;const a=t.renderer.state.uniformLocations.get(i);if(r.length)if(void 0===a||a.length!==r.length)t.renderer.state.uniformLocations.set(i,r.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let i=0,r=t.length;i<r;i++)if(t[i]!==e[i])return!1;return!0}(a,r))return;a.set?a.set(r):function(t,e){for(let i=0,r=t.length;i<r;i++)t[i]=e[i]}(a,r),t.renderer.state.uniformLocations.set(i,a)}else{if(a===r)return;t.renderer.state.uniformLocations.set(i,r)}switch(e){case 5126:return r.length?t.uniform1fv(i,r):t.uniform1f(i,r);case 35664:return t.uniform2fv(i,r);case 35665:return t.uniform3fv(i,r);case 35666:return t.uniform4fv(i,r);case 35670:case 5124:case 35678:case 35680:return r.length?t.uniform1iv(i,r):t.uniform1i(i,r);case 35671:case 35667:return t.uniform2iv(i,r);case 35672:case 35668:return t.uniform3iv(i,r);case 35673:case 35669:return t.uniform4iv(i,r);case 35674:return t.uniformMatrix2fv(i,!1,r);case 35675:return t.uniformMatrix3fv(i,!1,r);case 35676:return t.uniformMatrix4fv(i,!1,r)}}function h(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let l=0;function o(t){l>100||(console.warn(t),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Texture.js":(t,e,i)=>{i.r(e),i.d(e,{Texture:()=>n});const r=new Uint8Array(4);function s(t){return 0==(t&t-1)}let a=1;class n{constructor(t,{image:e,target:i=t.TEXTURE_2D,type:r=t.UNSIGNED_BYTE,format:s=t.RGBA,internalFormat:n=s,wrapS:h=t.CLAMP_TO_EDGE,wrapT:l=t.CLAMP_TO_EDGE,generateMipmaps:o=!0,minFilter:g=(o?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:u=t.LINEAR,premultiplyAlpha:m=!1,unpackAlignment:c=4,flipY:d=i==t.TEXTURE_2D,anisotropy:p=0,level:f=0,width:E,height:x=E}={}){this.gl=t,this.id=a++,this.image=e,this.target=i,this.type=r,this.format=s,this.internalFormat=n,this.minFilter=g,this.magFilter=u,this.wrapS=h,this.wrapT=l,this.generateMipmaps=o,this.premultiplyAlpha=m,this.unpackAlignment=c,this.flipY=d,this.anisotropy=Math.min(p,this.gl.renderer.parameters.maxAnisotropy),this.level=f,this.width=E,this.height=x,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||s(this.image.width)&&s(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r);this.store.image=this.image}}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,i)=>{i.r(e),i.d(e,{Mat3:()=>s});var r=i("./node_modules/ogl/src/math/functions/Mat3Func.js");class s extends Array{constructor(t=1,e=0,i=0,r=0,s=1,a=0,n=0,h=0,l=1){return super(t,e,i,r,s,a,n,h,l),this}set(t,e,i,s,a,n,h,l,o){return t.length?this.copy(t):(r.set(this,t,e,i,s,a,n,h,l,o),this)}translate(t,e=this){return r.translate(this,e,t),this}rotate(t,e=this){return r.rotate(this,e,t),this}scale(t,e=this){return r.scale(this,e,t),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this}identity(){return r.identity(this),this}copy(t){return r.copy(this,t),this}fromMatrix4(t){return r.fromMat4(this,t),this}fromQuaternion(t){return r.fromQuat(this,t),this}fromBasis(t,e,i){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],i[0],i[1],i[2]),this}inverse(t=this){return r.invert(this,t),this}getNormalMatrix(t){return r.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,i)=>{function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function s(t,e){let i=e[0],r=e[1],s=e[2],a=e[3],n=i+i,h=r+r,l=s+s,o=i*n,g=r*n,u=r*h,m=s*n,c=s*h,d=s*l,p=a*n,f=a*h,E=a*l;return t[0]=1-u-d,t[3]=g-E,t[6]=m+f,t[1]=g+E,t[4]=1-o-d,t[7]=c-p,t[2]=m-f,t[5]=c+p,t[8]=1-o-u,t}function a(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function n(t,e,i,r,s,a,n,h,l,o){return t[0]=e,t[1]=i,t[2]=r,t[3]=s,t[4]=a,t[5]=n,t[6]=h,t[7]=l,t[8]=o,t}function h(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function l(t,e){if(t===e){let i=e[1],r=e[2],s=e[5];t[1]=e[3],t[2]=e[6],t[3]=i,t[5]=e[7],t[6]=r,t[7]=s}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function o(t,e){let i=e[0],r=e[1],s=e[2],a=e[3],n=e[4],h=e[5],l=e[6],o=e[7],g=e[8],u=g*n-h*o,m=-g*a+h*l,c=o*a-n*l,d=i*u+r*m+s*c;return d?(d=1/d,t[0]=u*d,t[1]=(-g*r+s*o)*d,t[2]=(h*r-s*n)*d,t[3]=m*d,t[4]=(g*i-s*l)*d,t[5]=(-h*i+s*a)*d,t[6]=c*d,t[7]=(-o*i+r*l)*d,t[8]=(n*i-r*a)*d,t):null}function g(t){let e=t[0],i=t[1],r=t[2],s=t[3],a=t[4],n=t[5],h=t[6],l=t[7],o=t[8];return e*(o*a-n*l)+i*(-o*s+n*h)+r*(l*s-a*h)}function u(t,e,i){let r=e[0],s=e[1],a=e[2],n=e[3],h=e[4],l=e[5],o=e[6],g=e[7],u=e[8],m=i[0],c=i[1],d=i[2],p=i[3],f=i[4],E=i[5],x=i[6],M=i[7],A=i[8];return t[0]=m*r+c*n+d*o,t[1]=m*s+c*h+d*g,t[2]=m*a+c*l+d*u,t[3]=p*r+f*n+E*o,t[4]=p*s+f*h+E*g,t[5]=p*a+f*l+E*u,t[6]=x*r+M*n+A*o,t[7]=x*s+M*h+A*g,t[8]=x*a+M*l+A*u,t}function m(t,e,i){let r=e[0],s=e[1],a=e[2],n=e[3],h=e[4],l=e[5],o=e[6],g=e[7],u=e[8],m=i[0],c=i[1];return t[0]=r,t[1]=s,t[2]=a,t[3]=n,t[4]=h,t[5]=l,t[6]=m*r+c*n+o,t[7]=m*s+c*h+g,t[8]=m*a+c*l+u,t}function c(t,e,i){let r=e[0],s=e[1],a=e[2],n=e[3],h=e[4],l=e[5],o=e[6],g=e[7],u=e[8],m=Math.sin(i),c=Math.cos(i);return t[0]=c*r+m*n,t[1]=c*s+m*h,t[2]=c*a+m*l,t[3]=c*n-m*r,t[4]=c*h-m*s,t[5]=c*l-m*a,t[6]=o,t[7]=g,t[8]=u,t}function d(t,e,i){let r=i[0],s=i[1];return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=s*e[3],t[4]=s*e[4],t[5]=s*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let i=e[0],r=e[1],s=e[2],a=e[3],n=e[4],h=e[5],l=e[6],o=e[7],g=e[8],u=e[9],m=e[10],c=e[11],d=e[12],p=e[13],f=e[14],E=e[15],x=i*h-r*n,M=i*l-s*n,A=i*o-a*n,v=r*l-s*h,T=r*o-a*h,_=s*o-a*l,F=g*p-u*d,S=g*f-m*d,w=g*E-c*d,P=u*f-m*p,y=u*E-c*p,R=m*E-c*f,b=x*R-M*y+A*P+v*w-T*S+_*F;return b?(b=1/b,t[0]=(h*R-l*y+o*P)*b,t[1]=(l*w-n*R-o*S)*b,t[2]=(n*y-h*w+o*F)*b,t[3]=(s*y-r*R-a*P)*b,t[4]=(i*R-s*w+a*S)*b,t[5]=(r*w-i*y-a*F)*b,t[6]=(p*_-f*T+E*v)*b,t[7]=(f*A-d*_-E*M)*b,t[8]=(d*T-p*A+E*x)*b,t):null}function f(t,e,i){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/i,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function E(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t}function x(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t}function M(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t}i.r(e),i.d(e,{add:()=>E,copy:()=>a,determinant:()=>g,fromMat4:()=>r,fromQuat:()=>s,identity:()=>h,invert:()=>o,multiply:()=>u,multiplyScalar:()=>M,normalFromMat4:()=>p,projection:()=>f,rotate:()=>c,scale:()=>d,set:()=>n,subtract:()=>x,translate:()=>m,transpose:()=>l})}},(function(t){t.h=()=>"a28878aecaa6c86f637e"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,